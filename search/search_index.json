{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Skeleton Project \u00b6 This is where your project documentation should go. It SHOULD NOT just be a repetition of the README, but COULD expand on some of the topics mentioned there. The primary focus SHOULD be on someone wanting to make use of the software/library rather than someone wanting to develop on it. The index page SHOULD be a brief introduction. All other sections SHOULD be separate pages, linked together via the MkDocs configuration. Some things to consider: Introduction What it is Why it exists How to obtain it Requirements Installation steps Quick Start. ie. what's the quickest way for someone to get up and running, covering the most common use cases. Architecture Configuration Different use cases Deeper dive into individual features/components Limitations Any relevant history How to get help FAQ Some third party documentation for inspiration: Guzzle Doctrine DBAL CLImate Respect Validation This is heavily inspired by the skeleton project from The PHP League . With some changes based on our preferences. Thanks to them! Quick Start \u00b6 git clone --depth = 1 git@github.com:graze/skeleton-project.git your-project cd ./your-project rm -rf .git git init You now have a copy of the files in this repository, in a new git repository with no previous history that can you manipulate and push to other remote repositories. Replacement \u00b6 Replace __author-name__ __author-username__ __author@email.com , skeleton-project , __package-name__ , __package-description__ , __year__ with their correct values in README.md , CHANGELOG.md , CONTRIBUTING.md , LICENSE , composer.json , Dockerfile and travis.yml files, then delete all the *.md files in the docs directory. Continuous Integration \u00b6 Our Open source projects rely on a set of external services to operate. Travis is our main continuous integration pipeline and performs testing and building. Scrutinizer profiles the code looking for coding standards violations and other recommendations. Packagist stores the build library for use by other projects with composer . Docker Hub is used to store docker images. Github is where the code is hosted. Github Pages hosts any documentation using github pages.","title":"Home"},{"location":"#skeleton-project","text":"This is where your project documentation should go. It SHOULD NOT just be a repetition of the README, but COULD expand on some of the topics mentioned there. The primary focus SHOULD be on someone wanting to make use of the software/library rather than someone wanting to develop on it. The index page SHOULD be a brief introduction. All other sections SHOULD be separate pages, linked together via the MkDocs configuration. Some things to consider: Introduction What it is Why it exists How to obtain it Requirements Installation steps Quick Start. ie. what's the quickest way for someone to get up and running, covering the most common use cases. Architecture Configuration Different use cases Deeper dive into individual features/components Limitations Any relevant history How to get help FAQ Some third party documentation for inspiration: Guzzle Doctrine DBAL CLImate Respect Validation This is heavily inspired by the skeleton project from The PHP League . With some changes based on our preferences. Thanks to them!","title":"Skeleton Project"},{"location":"#quick-start","text":"git clone --depth = 1 git@github.com:graze/skeleton-project.git your-project cd ./your-project rm -rf .git git init You now have a copy of the files in this repository, in a new git repository with no previous history that can you manipulate and push to other remote repositories.","title":"Quick Start"},{"location":"#replacement","text":"Replace __author-name__ __author-username__ __author@email.com , skeleton-project , __package-name__ , __package-description__ , __year__ with their correct values in README.md , CHANGELOG.md , CONTRIBUTING.md , LICENSE , composer.json , Dockerfile and travis.yml files, then delete all the *.md files in the docs directory.","title":"Replacement"},{"location":"#continuous-integration","text":"Our Open source projects rely on a set of external services to operate. Travis is our main continuous integration pipeline and performs testing and building. Scrutinizer profiles the code looking for coding standards violations and other recommendations. Packagist stores the build library for use by other projects with composer . Docker Hub is used to store docker images. Github is where the code is hosted. Github Pages hosts any documentation using github pages.","title":"Continuous Integration"},{"location":"external_services/docker_hub/","text":"Docker Hub \u00b6 Some projects include a Dockerfile that should be deployed to Docker Hub . Create an Automated Build repository: Visit: Add Automated Build Select the repository from github Change the namespace to graze Click Create Build Settings: Go to Build Settings Ensure that it is built on tag and branch and branch = master gets built as latest Create a build hook: This will build the image with extra arguments passed into the Dockerfile Create the file hooks/build Put the following in: #!/bin/sh docker build --build-arg BUILD_DATE = \" $( date -u + \"%Y-%m-%dT%H:%M:%SZ\" ) \" \\ --build-arg VCS_REF = \" $( git rev-parse --short HEAD ) \" \\ -t \" $IMAGE_NAME \" . Create a standard repository Visit Add Repository Push images to it using the docker command line: docker build -t graze/skeleton . docker push graze/skeleton Set up Permissions Go to Collaborators Add all the teams required for this project: admin , owners => Admin permission developers , build , deploy => Write permission","title":"DockerHub"},{"location":"external_services/docker_hub/#docker-hub","text":"Some projects include a Dockerfile that should be deployed to Docker Hub . Create an Automated Build repository: Visit: Add Automated Build Select the repository from github Change the namespace to graze Click Create Build Settings: Go to Build Settings Ensure that it is built on tag and branch and branch = master gets built as latest Create a build hook: This will build the image with extra arguments passed into the Dockerfile Create the file hooks/build Put the following in: #!/bin/sh docker build --build-arg BUILD_DATE = \" $( date -u + \"%Y-%m-%dT%H:%M:%SZ\" ) \" \\ --build-arg VCS_REF = \" $( git rev-parse --short HEAD ) \" \\ -t \" $IMAGE_NAME \" . Create a standard repository Visit Add Repository Push images to it using the docker command line: docker build -t graze/skeleton . docker push graze/skeleton Set up Permissions Go to Collaborators Add all the teams required for this project: admin , owners => Admin permission developers , build , deploy => Write permission","title":"Docker Hub"},{"location":"external_services/github/","text":"Github \u00b6 Github is our default code repository location. Add the Team: Open Source Team as Admin to the project. Add the Team: Developers Team with Write access to the project.","title":"GitHub"},{"location":"external_services/github/#github","text":"Github is our default code repository location. Add the Team: Open Source Team as Admin to the project. Add the Team: Developers Team with Write access to the project.","title":"Github"},{"location":"external_services/github_pages/","text":"Github Pages \u00b6 To deploy a documentation site (like this one), we currently use Github Pages Travis can deploy the documentation to github pages. Add a deploy stage to the .travis.yml file to deploy to github pages. A slightly more complex version is included in the example file stages: - test - name: deploy if: branch = master jobs: include: - stage: deploy # ensure docker is installed first before_script: sudo apt-get -y -o Dpkg::Options::=\"--force-confnew\" install docker-ce # The command to run, change this if using something different script: make docs-build deploy: provider: pages # The local directory where the documentation is built to local-dir: site skip-cleanup: true keep-history: true verbose: true github-token: $GITHUB_TOKEN on: branch: master Generate a github token with write access to your repository. Add the token to the travis project. Either via the Travis Admin page Or via the command line Travis CLI travis env GITHUB_TOKEN <token>","title":"GitHub Pages"},{"location":"external_services/github_pages/#github-pages","text":"To deploy a documentation site (like this one), we currently use Github Pages Travis can deploy the documentation to github pages. Add a deploy stage to the .travis.yml file to deploy to github pages. A slightly more complex version is included in the example file stages: - test - name: deploy if: branch = master jobs: include: - stage: deploy # ensure docker is installed first before_script: sudo apt-get -y -o Dpkg::Options::=\"--force-confnew\" install docker-ce # The command to run, change this if using something different script: make docs-build deploy: provider: pages # The local directory where the documentation is built to local-dir: site skip-cleanup: true keep-history: true verbose: true github-token: $GITHUB_TOKEN on: branch: master Generate a github token with write access to your repository. Add the token to the travis project. Either via the Travis Admin page Or via the command line Travis CLI travis env GITHUB_TOKEN <token>","title":"Github Pages"},{"location":"external_services/packagist/","text":"Packagist \u00b6 Packagist is used to deploy the application/library using composer Visit Packagist: Graze - package repository Log-in using the graze account Click Submit Paste the git url (e.g. git@github.com:graze/skeleton-project.git ) Click Check Follow the instructions on auto updating the project from github in packagist","title":"Packagist"},{"location":"external_services/packagist/#packagist","text":"Packagist is used to deploy the application/library using composer Visit Packagist: Graze - package repository Log-in using the graze account Click Submit Paste the git url (e.g. git@github.com:graze/skeleton-project.git ) Click Check Follow the instructions on auto updating the project from github in packagist","title":"Packagist"},{"location":"external_services/scrutinizer/","text":"Scrutinizer CI \u00b6 We use Scrutinizer for coding standards and quality. To add your repository to be analysed: Visit Scrutinizer Log-in via github Click + Add Repository Select graze as the organisation If you do not have permissions, ask a graze/@open-source-team member for access Enter the repository name Select PHP as the language Ensure tests are not being run (as travis is doing the testing) Click Add Repository Click on the \ud83d\udd27 > Configuration set Shared Config to graze/standards + open source","title":"Scrutinizer"},{"location":"external_services/scrutinizer/#scrutinizer-ci","text":"We use Scrutinizer for coding standards and quality. To add your repository to be analysed: Visit Scrutinizer Log-in via github Click + Add Repository Select graze as the organisation If you do not have permissions, ask a graze/@open-source-team member for access Enter the repository name Select PHP as the language Ensure tests are not being run (as travis is doing the testing) Click Add Repository Click on the \ud83d\udd27 > Configuration set Shared Config to graze/standards + open source","title":"Scrutinizer CI"},{"location":"external_services/travis/","text":"Travis CI \u00b6 We use Travis CI for our open source build pipeline which tests all commits. Add your project using the following steps: Visit: Travis: Graze Profile Log-in with github Click sync with github Enable your project","title":"Travis"},{"location":"external_services/travis/#travis-ci","text":"We use Travis CI for our open source build pipeline which tests all commits. Add your project using the following steps: Visit: Travis: Graze Profile Log-in with github Click sync with github Enable your project","title":"Travis CI"}]}